{
  "ApiManager": "import{instance as axios}from'./instance';\n\nimport * as services from'./services';\n\n;export class ApiManager{static interceptors={};\n\n{servicesFields}\n\nconstructor(){if(!ApiManager.instance){ApiManager.instance=this}return ApiManager.instance}\n\n{servicesGetters}\n\nproxyService(apiService){const proxyHandler={get:(target,key)=>{if(target[key]!==null){if(typeof target[key]==='function'){return async(...payload)=>{await this.onRequest();try{const responseData=await target[key](...payload);await this.onResponse();return responseData}catch(error){throw await this.onError(error);}}}else if(typeof target[key]==='object'){return this.proxyService(target[key])}}else{throw`Incorrect field type:${key}`}},};return new Proxy(apiService,proxyHandler)}async onRequest(){return await Promise.all([])}async onResponse(){return await Promise.all([])}async onError(error){return error}logout(){axios.defaults.headers.Authorization=''}};\n",
  "instance": "import axios from'axios'\n\n;const getAccessToken=()=>{return localStorage.getItem('EXAMPLE_NAME')};const accessToken=getAccessToken();export const instance=axios.create({baseURL:process.env.API_URL,headers:{Accept:'application/json',...(accessToken?{Authorization:`Bearer ${accessToken}`}:{}),},});\n"
}
